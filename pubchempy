#
# My outputs from Python, looking at how I can extract data from the pubchem REST api to extract simles from an Inchi (as an alternative to RDKit and Openbabel). 
# Note, PubChem internally uses Openbabel.
# Communicated with PubChem people, and you can only get a 2d structure back from the API right now :(
#

cs-it-6946574:MetAtlas wadejong$ python
Python 3.5.2 |Continuum Analytics, Inc.| (default, Jul  2 2016, 17:52:12) 
[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import pubchempy
>>> properties = 'isomeric_smiles', 'canonical_smiles', 'molecular_formula', 'molecular_weight', 'exact_mass', 'inchikey', 'iupac_name', 'charge'
>>> print(properties)
('isomeric_smiles', 'canonical_smiles', 'molecular_formula', 'molecular_weight', 'exact_mass', 'inchikey', 'iupac_name', 'charge')
>>> res = pubchempy.get_properties(properties, 'InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1', 'inchi')
>>> print(res)
[{'CID': 5893, 'CanonicalSMILES': 'C1=CC(=C[N+](=C1)C2C(C(C(O2)COP(=O)(O)OP(=O)(O)OCC3C(C(C(O3)N4C=NC5=C4N=CN=C5N)O)O)O)O)C(=O)N', 'ExactMass': 664.117, 'InChIKey': 'BAWFJGJZGIEFAR-NNYOXOHSSA-O', 'Charge': 1, 'MolecularFormula': 'C21H28N7O14P2+', 'MolecularWeight': 664.438, 'IUPACName': '[[(2R,3S,4R,5R)-5-(6-aminopurin-9-yl)-3,4-dihydroxyoxolan-2-yl]methoxy-hydroxyphosphoryl] [(2R,3S,4R,5R)-5-(3-carbamoylpyridin-1-ium-1-yl)-3,4-dihydroxyoxolan-2-yl]methyl hydrogen phosphate', 'IsomericSMILES': 'C1=CC(=C[N+](=C1)[C@H]2[C@@H]([C@@H]([C@H](O2)COP(=O)(O)OP(=O)(O)OC[C@@H]3[C@H]([C@H]([C@@H](O3)N4C=NC5=C4N=CN=C5N)O)O)O)O)C(=O)N'}]
>>> property_list = 'CanonicalSMILES', 'ExactMass', 'InChIKey', 'Charge', 'MolecularFormula', 'MolecularWeight', 'IUPACName', 'IsomericSMILES'
>>> res = pubchempy.get_properties(properties, 'InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1', 'inchi')
>>> print(res)
[{'CID': 5893, 'CanonicalSMILES': 'C1=CC(=C[N+](=C1)C2C(C(C(O2)COP(=O)(O)OP(=O)(O)OCC3C(C(C(O3)N4C=NC5=C4N=CN=C5N)O)O)O)O)C(=O)N', 'ExactMass': 664.117, 'InChIKey': 'BAWFJGJZGIEFAR-NNYOXOHSSA-O', 'Charge': 1, 'MolecularFormula': 'C21H28N7O14P2+', 'MolecularWeight': 664.438, 'IUPACName': '[[(2R,3S,4R,5R)-5-(6-aminopurin-9-yl)-3,4-dihydroxyoxolan-2-yl]methoxy-hydroxyphosphoryl] [(2R,3S,4R,5R)-5-(3-carbamoylpyridin-1-ium-1-yl)-3,4-dihydroxyoxolan-2-yl]methyl hydrogen phosphate', 'IsomericSMILES': 'C1=CC(=C[N+](=C1)[C@H]2[C@@H]([C@@H]([C@H](O2)COP(=O)(O)OP(=O)(O)OC[C@@H]3[C@H]([C@H]([C@@H](O3)N4C=NC5=C4N=CN=C5N)O)O)O)O)C(=O)N'}]
>>> myAtoms = pubchempy.Compound.from_cid(5893,record_type='3d').to_dict(properties=['atoms'])
>>> print(myAtoms)
{'atoms': [{'aid': 1, 'element': 15, 'x': 3.972, 'y': -2.2332, 'z': 0.6723}, {'aid': 2, 'element': 15, 'x': 3.9365, 'y': 0.0802, 'z': 2.4901}, {'aid': 3, 'element': 8, 'x': -0.8734, 'y': -3.4, 'z': -0.0447}, {'aid': 4, 'element': 8, 'x': 1.1724, 'y': 3.1315, 'z': 1.1767}, {'aid': 5, 'element': 8, 'x': -0.0595, 'y': -3.3585, 'z': -2.9829}, {'aid': 6, 'element': 8, 'x': -1.3874, 'y': -1.0072, 'z': -2.6774}, {'aid': 7, 'element': 8, 'x': -1.3477, 'y': 3.4017, 'z': 2.8646}, {'aid': 8, 'element': 8, 'x': -2.3038, 'y': 2.5702, 'z': 0.4611}, {'aid': 9, 'element': 8, 'x': 2.7195, 'y': -2.7849, 'z': -0.1913}, {'aid': 10, 'element': 8, 'x': 2.9233, 'y': 1.3407, 'z': 2.453}, {'aid': 11, 'element': 8, 'x': 3.4967, 'y': -0.7784, 'z': 1.1931}, {'aid': 12, 'element': 8, 'x': 3.9602, 'y': -3.1308, 'z': 2.0183}, {'aid': 13, 'element': 8, 'x': 3.3949, 'y': -0.8181, 'z': 3.7215}, {'aid': 14, 'element': 8, 'x': 5.2844, 'y': -2.2275, 'z': -0.0566}, {'aid': 15, 'element': 8, 'x': 5.3972, 'y': 0.4202, 'z': 2.5479}, {'aid': 16, 'element': 8, 'x': 3.1236, 'y': 0.707, 'z': -4.1967}, {'aid': 17, 'element': 7, 'x': -2.5662, 'y': -1.7528, 'z': 0.1823}, {'element': 7, 'x': 0.3738, 'y': 2.9789, 'z': -1.1111, 'aid': 18, 'charge': 1}, {'aid': 19, 'element': 7, 'x': -3.2225, 'y': -0.7712, 'z': 2.0732}, {'aid': 20, 'element': 7, 'x': -4.5533, 'y': -1.4157, 'z': -1.1737}, {'aid': 21, 'element': 7, 'x': -6.2813, 'y': -0.2207, 'z': 0.0679}, {'aid': 22, 'element': 7, 'x': -5.975, 'y': 0.4947, 'z': 2.331}, {'aid': 23, 'element': 7, 'x': 3.4537, 'y': 0.3348, 'z': -1.9582}, {'aid': 24, 'element': 6, 'x': 0.3521, 'y': -2.534, 'z': -1.8927}, {'aid': 25, 'element': 6, 'x': -0.7618, 'y': -1.5678, 'z': -1.5411}, {'aid': 26, 'element': 6, 'x': 0.4469, 'y': -3.3924, 'z': -0.6352}, {'aid': 27, 'element': 6, 'x': -1.707, 'y': -2.4672, 'z': -0.759}, {'aid': 28, 'element': 6, 'x': -0.7287, 'y': 2.2456, 'z': 2.3004}, {'aid': 29, 'element': 6, 'x': -0.9806, 'y': 2.2166, 'z': 0.8061}, {'aid': 30, 'element': 6, 'x': 0.7855, 'y': 2.4146, 'z': 2.3715}, {'aid': 31, 'element': 6, 'x': 0.0278, 'y': 3.2369, 'z': 0.3096}, {'aid': 32, 'element': 6, 'x': 1.4277, 'y': -2.8387, 'z': 0.3888}, {'aid': 33, 'element': 6, 'x': 1.5304, 'y': 1.0872, 'z': 2.3979}, {'aid': 34, 'element': 6, 'x': -3.8346, 'y': -1.3006, 'z': -0.0468}, {'aid': 35, 'element': 6, 'x': -2.2435, 'y': -1.4116, 'z': 1.469}, {'aid': 36, 'element': 6, 'x': 1.3684, 'y': 2.1254, 'z': -1.3896}, {'aid': 37, 'element': 6, 'x': -0.3207, 'y': 3.6082, 'z': -2.069}, {'aid': 38, 'element': 6, 'x': -4.2231, 'y': -0.6948, 'z': 1.1372}, {'aid': 39, 'element': 6, 'x': 1.7125, 'y': 1.8649, 'z': -2.7084}, {'aid': 40, 'element': 6, 'x': -0.0203, 'y': 3.3864, 'z': -3.4054}, {'aid': 41, 'element': 6, 'x': 1.008, 'y': 2.5044, 'z': -3.7239}, {'aid': 42, 'element': 6, 'x': -5.499, 'y': -0.1409, 'z': 1.1712}, {'aid': 43, 'element': 6, 'x': -5.7674, 'y': -0.8439, 'z': -1.0199}, {'aid': 44, 'element': 6, 'x': 2.7893, 'y': 0.9409, 'z': -3.0212}, {'aid': 45, 'element': 1, 'x': 1.2762, 'y': -2.0315, 'z': -2.1907}, {'aid': 46, 'element': 1, 'x': -0.3674, 'y': -0.7579, 'z': -0.9169}, {'aid': 47, 'element': 1, 'x': 0.7146, 'y': -4.4265, 'z': -0.8809}, {'aid': 48, 'element': 1, 'x': -2.3674, 'y': -3.0443, 'z': -1.4178}, {'aid': 49, 'element': 1, 'x': -1.117, 'y': 1.3686, 'z': 2.8254}, {'aid': 50, 'element': 1, 'x': -0.7649, 'y': 1.222, 'z': 0.4019}, {'aid': 51, 'element': 1, 'x': 1.0964, 'y': 3.0322, 'z': 3.2217}, {'aid': 52, 'element': 1, 'x': -0.3456, 'y': 4.2666, 'z': 0.3754}, {'aid': 53, 'element': 1, 'x': 1.444, 'y': -3.4824, 'z': 1.2749}, {'aid': 54, 'element': 1, 'x': 1.1281, 'y': -1.84, 'z': 0.722}, {'aid': 55, 'element': 1, 'x': 1.225, 'y': 0.5158, 'z': 3.2791}, {'aid': 56, 'element': 1, 'x': 1.3145, 'y': 0.5006, 'z': 1.5007}, {'aid': 57, 'element': 1, 'x': 0.6598, 'y': -3.9895, 'z': -3.1568}, {'aid': 58, 'element': 1, 'x': -2.1154, 'y': -0.4442, 'z': -2.364}, {'aid': 59, 'element': 1, 'x': -1.1282, 'y': 3.4147, 'z': 3.8119}, {'aid': 60, 'element': 1, 'x': -2.899, 'y': 1.9519, 'z': 0.9179}, {'aid': 61, 'element': 1, 'x': -1.2851, 'y': -1.6443, 'z': 1.9129}, {'aid': 62, 'element': 1, 'x': 1.8417, 'y': 1.6677, 'z': -0.5371}, {'aid': 63, 'element': 1, 'x': -1.112, 'y': 4.2791, 'z': -1.7574}, {'aid': 64, 'element': 1, 'x': -0.5781, 'y': 3.8903, 'z': -4.1874}, {'aid': 65, 'element': 1, 'x': 1.2422, 'y': 2.3304, 'z': -4.7706}, {'aid': 66, 'element': 1, 'x': -6.4207, 'y': -0.8889, 'z': -1.8847}, {'aid': 67, 'element': 1, 'x': 4.7119, 'y': -3.0569, 'z': 2.6441}, {'aid': 68, 'element': 1, 'x': 2.4862, 'y': -1.1854, 'z': 3.6922}, {'aid': 69, 'element': 1, 'x': -6.9059, 'y': 0.8888, 'z': 2.3313}, {'aid': 70, 'element': 1, 'x': -5.393, 'y': 0.5554, 'z': 3.1556}, {'aid': 71, 'element': 1, 'x': 4.2134, 'y': -0.3114, 'z': -2.1483}, {'aid': 72, 'element': 1, 'x': 3.2469, 'y': 0.4714, 'z': -0.9768}]}
>>> 
